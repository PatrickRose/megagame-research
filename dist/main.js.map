{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"React\"","webpack:///./src/components/Suit.tsx","webpack:///./src/Suit.ts","webpack:///./src/components/Card.tsx","webpack:///./src/index.tsx","webpack:///external \"ReactDOM\"","webpack:///./src/components/Board.tsx","webpack:///./src/components/Pair.tsx","webpack:///./src/components/Score.tsx"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","React","Suit","Component","icon","this","props","LEAF","BRAIN","COG","MATH","className","ALL_SUITS","CardType","PairType","Card","suit","otherItemsInPair","card","getSuit","validationMethod","getExtraText","renderButtons","inPair","LEFT","disabled","onClick","pairSelect","NULL","RIGHT","cardDef","selectFunction","cardProps","type","NO_SINGLE","NoSingle","BASE","Error","length","ReactDOM","render","Board","document","getElementById","SuitDef","noSingle","allowSingle","concat","map","Hand","index","selectedPair","selectCard","STARTING_HAND_SIZE","super","state","getStartingState","deck","BasicDeck","j","Math","floor","random","hand","slice","pairs","discards","leftPair","rightPair","drawCards","inProgressRender","gameOverRender","positionInHand","renderDiscardButton","renderMakePairButton","renderPairs","brains","cog","leaf","math","makeCards","cardsToDraw","discardFirst","push","pop","setState","discardHand","leftPairs","generatePair","rightPairs","rightValue","Pair","valueOfPair","leftValue","message","validateSet","makePair","searchFor","filter","pairDefs","newPairDef","left","right","scores","basic","bonus","restart","renderScore","ScoredPair","score","selectScore","scoreType","scoreAs","scorePair","brain","cogs","pair","Score","PairSide","cards","set","createFromDef","newSet","nextCardDef","validInPair","reduce","total","currentValue","renderBonuses","isBalancedPair","makeButtons","selected","suits"],"mappings":"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","file":"main.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 4);\n","module.exports = React;","import {Suit as SuitEnum} from \"../Suit\";\nimport * as React from \"react\";\n\nexport interface SuitProps {\n    value: SuitEnum\n};\n\nexport class Suit extends React.Component<SuitProps, {}> {\n    render(): React.ReactNode {\n        let icon: string;\n\n        switch (this.props.value) {\n            case SuitEnum.LEAF:\n                icon = 'fa-leaf';\n                break;\n            case SuitEnum.BRAIN:\n                icon = 'fa-brain';\n                break;\n            case SuitEnum.COG:\n                icon = 'fa-cog';\n                break;\n            case SuitEnum.MATH:\n                icon = 'fa-square-root-alt';\n                break;\n        }\n\n        return <span className={\"fas \" + icon}>\n            {this.props.value}\n        </span>\n    }\n}\n","export enum Suit {\n    LEAF=\"LEAF\",\n    BRAIN=\"BRAIN\",\n    COG=\"COG\",\n    MATH=\"MATH\",\n}\n\nexport const ALL_SUITS = [\n    Suit.BRAIN,\n    Suit.COG,\n    Suit.LEAF,\n    Suit.MATH\n];\n","import {Suit} from \"../Suit\";\nimport {Suit as SuitComponent} from \"./Suit\";\nimport * as React from \"react\";\n\nexport type PairSelect = (selectedPair: PairType) => void;\n\nexport enum CardType {\n    BASE,\n    NO_SINGLE\n}\n\nexport interface CardDef {\n    value: number,\n    suit: Suit,\n    inPair: PairType,\n    type: CardType,\n}\n\nexport interface CardProps {\n    value: number,\n    suit: Suit,\n    inPair: PairType,\n    pairSelect: PairSelect\n}\n\nexport enum PairType {\n    LEFT,\n    RIGHT,\n    NULL\n}\n\nexport class Card extends React.Component<CardProps> {\n\n    public getSuit(): Suit {\n        return this.props.suit;\n    }\n\n    public validInPair(otherItemsInPair: Card[]): boolean {\n        for (let card of otherItemsInPair) {\n            if (card.getSuit() != this.getSuit()) {\n                return false;\n            }\n        }\n\n        return this.validationMethod(otherItemsInPair);\n    }\n\n    public render() {return (<div className={\"card-wrapper\"}>\n            <div className={\"card\"}>\n                <div className={\"card-body\"}>\n                    <div className={\"card-title\"}><span className={\"card-value\"}>{this.props.value}</span><SuitComponent value={this.props.suit}/></div>\n                    <div className={\"card-text\"}>{this.getExtraText()}</div>\n                </div>\n                <div className={\"card-footer\"}>\n                    {this.renderButtons()}\n                </div>\n            </div>\n        </div>);\n    }\n\n    protected validationMethod(otherItemsInPair: Card[]): boolean {\n        return true;\n    }\n\n    protected getExtraText(): string {\n        return ''\n    }\n\n    private renderButtons(): React.ReactNode {\n        return <div className={\"btn-group\"}>\n            <button className={\"btn btn-secondary\" + (this.props.inPair == PairType.LEFT ? ' active' : '')}\n                    disabled={this.props.inPair == PairType.LEFT }\n                    onClick={() => { this.props.pairSelect(PairType.LEFT) }}>\n                Left\n            </button>\n            <button className={\"btn btn-secondary\" + (this.props.inPair == PairType.NULL ? ' active' : '')}\n                    disabled={this.props.inPair == PairType.NULL }\n                    onClick={() => { this.props.pairSelect(PairType.NULL) }}>\n                No pair\n            </button>\n            <button className={\"btn btn-secondary\" + (this.props.inPair == PairType.RIGHT ? ' active' : '')}\n                    disabled={this.props.inPair == PairType.RIGHT }\n                    onClick={() => { this.props.pairSelect(PairType.RIGHT) }}>\n                Right\n            </button>\n        </div>\n    }\n\n    static createFromDef(cardDef: CardDef, selectFunction: PairSelect = () => {}): Card {\n        let cardProps: CardProps = {\n            ...cardDef,\n            pairSelect: selectFunction\n        }\n\n        switch (cardDef.type) {\n            case CardType.NO_SINGLE:\n                return new NoSingle(cardProps);\n            case CardType.BASE:\n                return new Card(cardProps);\n            default:\n                throw new Error(\"Unknown cardtype \" + cardDef.type);\n        }\n    }\n}\n\nexport class NoSingle extends Card {\n    protected validationMethod(otherItemsInPair: Card[]): boolean {\n        return otherItemsInPair.length > 0;\n    }\n\n    protected getExtraText(): string {\n        return 'No single';\n    }\n}\n\n\n","import * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\n\nimport {Board} from \"./components/Board\";\n\nReactDOM.render(\n    <Board />,\n    document.getElementById(\"example\")\n);\n","module.exports = ReactDOM;","import * as React from \"react\";\nimport {Card, CardDef, CardType, NoSingle, PairType} from \"./Card\";\nimport {Suit} from \"../Suit\";\nimport {Pair, PairDef, ScoredPair} from \"./Pair\";\nimport {Score, ScoreProps, Scores} from \"./Score\";\n\nexport interface BoardState {\n    deck: CardDef[],\n    hand: CardDef[],\n    discards: CardDef[],\n    pairs: PairDef[],\n    leftPair: CardDef[],\n    rightPair: CardDef[]\n}\n\nclass SuitDef {\n    constructor(\n        private readonly suit: Suit,\n        private readonly noSingle: Number[],\n        private readonly allowSingle: Number[]\n    ) {\n    }\n\n    public makeCards(): CardDef[] {\n        return [].concat(\n            this.noSingle.map(\n                (value: number): CardDef => {\n                    return {\n                        value: value,\n                        suit: this.suit,\n                        inPair: PairType.NULL,\n                        type: CardType.NO_SINGLE\n                    }\n                }\n            ),\n            this.allowSingle.map(\n                (value: number): CardDef => {\n                    return {\n                        value: value,\n                        suit: this.suit,\n                        inPair: PairType.NULL,\n                        type: CardType.BASE\n                    }\n                }\n            )\n        );\n    }\n}\n\ntype HandProps = {\n    value: CardDef[],\n    selectCard: (selectedPair: PairType, positionInHand: number) => void\n};\n\nclass Hand extends React.Component<HandProps, {}> {\n    render(): React.ReactNode {\n        return <div className={\"hand\"}>\n            {this.props.value.map(\n                (cardDef: CardDef, index: number): React.ReactNode => {\n                    switch (cardDef.type) {\n                        case CardType.BASE:\n                            return <Card value={cardDef.value}\n                                         suit={cardDef.suit}\n                                         inPair={cardDef.inPair}\n                                         pairSelect={(selectedPair: PairType) => {\n                                             this.props.selectCard(selectedPair, index);\n                                         }}\n                                         key={index}\n                            />;\n                        case CardType.NO_SINGLE:\n                            return <NoSingle value={cardDef.value}\n                                             suit={cardDef.suit}\n                                             inPair={cardDef.inPair}\n                                             pairSelect={(selectedPair: PairType) => {\n                                                 this.props.selectCard(selectedPair, index);\n                                             }}\n                                             key={index}\n                            />;\n                        default:\n                            throw new Error(\"Unknown card type\")\n                    }\n                }\n            )}\n        </div>;\n    }\n}\n\nconst STARTING_HAND_SIZE = 6;\n\nexport class Board extends React.Component<{}, BoardState> {\n    constructor(props: {}) {\n        super(props);\n\n        let state: BoardState = this.getStartingState();\n\n        this.state = state;\n    }\n\n    private getStartingState(deck: CardDef[] = Board.BasicDeck()): BoardState {\n        for (let i = deck.length - 1; i > 0; i--) {\n            let j = Math.floor(Math.random() * (i + 1));\n            [deck[i], deck[j]] = [deck[j], deck[i]];\n        }\n\n        let hand: CardDef[] = deck.slice(0, STARTING_HAND_SIZE);\n\n        return {\n            deck: deck.slice(STARTING_HAND_SIZE),\n            hand: hand,\n            pairs: [],\n            discards: [],\n            leftPair: [],\n            rightPair: []\n        }\n    }\n\n    private discardHand() {\n        this.drawCards(\n            this.state.hand.length + 1,\n            true\n        );\n    }\n\n    render(): React.ReactNode {\n        if (this.state.hand.length > 0) {\n            return this.inProgressRender();\n        } else {\n            return this.gameOverRender();\n        }\n    }\n\n    private inProgressRender() {\n        return <div>\n            <h2>Cards left in deck: {this.state.deck.length}</h2>\n            <Hand value={this.state.hand}\n                  selectCard={\n                      (selectedPair: PairType, positionInHand: number) => {\n                          return this.selectCard(selectedPair, positionInHand);\n                      }\n                  }\n            />\n            <div className={\"btn-group\"}>\n                {this.renderDiscardButton()}\n                {this.renderMakePairButton()}\n            </div>\n            {this.renderPairs()}\n        </div>;\n    }\n\n    private static BasicDeck(): CardDef[] {\n        const brains: SuitDef = new SuitDef(\n            Suit.BRAIN,\n            [1, 1, 2, 2, 3],\n            [3, 3, 4, 5, 6, 10]\n        );\n        const cog: SuitDef = new SuitDef(\n            Suit.COG,\n            [1, 1, 2],\n            [1, 2, 3, 4, 4, 5, 7]\n        );\n        const leaf: SuitDef = new SuitDef(\n            Suit.LEAF,\n            [1, 2, 3, 4],\n            [2, 5, 6]\n        );\n        const math: SuitDef = new SuitDef(\n            Suit.MATH,\n            [1, 2],\n            [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 5, 6, 8]\n        );\n\n        return [].concat(\n            math.makeCards(),\n            leaf.makeCards(),\n            cog.makeCards(),\n            brains.makeCards()\n        );\n    }\n\n    private drawCards(cardsToDraw: number, discardFirst: boolean = false) {\n        let deck = this.state.deck.slice(),\n            hand = this.state.hand.slice(),\n            discards = this.state.discards.slice();\n\n        if (discardFirst) {\n            discards.push(...hand);\n            hand = [];\n        }\n\n        if (deck.length < cardsToDraw) {\n            hand.push(...deck);\n            deck = [];\n        } else {\n            for (let i = 0; i < cardsToDraw; i++) {\n                hand.push(deck.pop());\n            }\n        }\n\n        this.setState({\n            deck: deck,\n            hand: hand,\n            discards: discards\n        });\n    }\n\n    private renderDiscardButton(): React.ReactNode {\n        return <button className={\"btn btn-secondary\"} onClick={() => {\n            this.discardHand()\n        }}>\n            {this.state.deck.length == 0 ? \"Discard hand and end game\" : \"Discard hand\"}\n        </button>;\n    }\n\n    private renderMakePairButton(): React.ReactNode {\n        const leftPairs = this.generatePair(PairType.LEFT),\n            rightPairs = this.generatePair(PairType.RIGHT);\n\n        const rightValue = Pair.valueOfPair(rightPairs),\n            leftValue = Pair.valueOfPair(leftPairs);\n\n        let message: string;\n\n        switch (true) {\n            case leftPairs.length == 0:\n                message = 'No cards selected for left side of pair';\n                break;\n            case rightPairs.length == 0:\n                message = 'No cards selected for right side of pair';\n                break;\n            case !Pair.validateSet(leftPairs):\n                message = 'Left side of pair is invalid';\n                break;\n            case !Pair.validateSet(rightPairs):\n                message = 'Right side of pair is invalid';\n                break;\n            case rightValue != leftValue:\n                message = 'Pair values don\\'t match (left: ' + leftValue + ', right: ' + rightValue + ')';\n                break\n            default:\n                message = 'Make pair'\n        }\n\n        return <button onClick={() => {\n            this.makePair()\n        }}\n                       disabled={message != 'Make pair'}\n                       className={\"btn btn-primary\"}>\n            {message}\n        </button>;\n    }\n\n    private generatePair(searchFor: PairType.RIGHT | PairType.LEFT): CardDef[] {\n        return this.state.hand.filter(\n            (value: CardDef) => {\n                return value.inPair == searchFor;\n            }\n        )\n    }\n\n    private selectCard(selectedPair: PairType, positionInHand: number) {\n        let hand = this.state.hand.slice();\n\n        hand[positionInHand].inPair = selectedPair;\n\n        this.setState({hand: hand});\n    }\n\n    private makePair() {\n        const leftPairs = this.generatePair(PairType.LEFT),\n            rightPairs = this.generatePair(PairType.RIGHT);\n\n        let pairDefs = this.state.pairs.slice();\n\n        let newPairDef: PairDef = {\n            left: leftPairs,\n            right: rightPairs\n        }\n\n        if (leftPairs[0].suit == rightPairs[0].suit) {\n            newPairDef.scores = {\n                basic: rightPairs[0].suit\n            };\n\n            if (leftPairs.length == rightPairs.length) {\n                newPairDef.scores.bonus = rightPairs[0].suit;\n            }\n        }\n        \n        pairDefs.push(newPairDef);\n\n        let hand = this.state.hand.slice().filter(\n            (value: CardDef) => {\n                return value.inPair == PairType.NULL\n            }\n        );\n\n        this.setState(\n            {\n                hand: hand,\n                pairs: pairDefs,\n            },\n            () => {\n                this.drawCards(2)\n            }\n        )\n    }\n\n    private renderPairs(): React.ReactNode {\n        return <table className={\"table\"}>\n            <thead>\n            <tr>\n                <th>Left Side</th>\n                <th>Right Side</th>\n            </tr>\n            </thead>\n            <tbody>\n            {this.state.pairs.map(\n                (value: PairDef, key: number) => {\n                    return <Pair leftPair={value.left} rightPair={value.right} key={key}/>\n                }\n            )}\n            </tbody>\n        </table>\n    }\n\n    private restart(): void {\n        this.setState(this.getStartingState());\n    }\n\n    private gameOverRender(): React.ReactNode {\n        return <div>\n            <h2>Game over!</h2>\n            <button className=\"btn btn-primary\" onClick={() => {this.restart(); }}>Play again?</button>\n            {this.renderScore()}\n            <table className={\"table\"}>\n                <thead>\n                <tr>\n                    <td>\n                        Left Pair\n                    </td>\n                    <td>\n                        Right Pair\n                    </td>\n                    <td>\n                        Bonuses\n                    </td>\n                    <td>\n                        Select side\n                    </td>\n                </tr>\n                </thead>\n                <tbody>\n                {\n                    this.state.pairs.map(\n                        (value, key: number) => {\n                            return <ScoredPair\n                                leftPair={value.left}\n                                rightPair={value.right}\n                                score={value.scores}\n                                selectScore={\n                                    (scoreType: keyof Scores, scoreAs: Suit) => {\n                                        this.scorePair(key, scoreType, scoreAs);\n                                    }\n                                }\n                                key={key}/>\n                        }\n                    )\n                }\n                </tbody>\n            </table>\n        </div>\n    }\n\n    public scorePair(key: number, scoreType: keyof Scores, scoreAs: Suit): void {\n        let pairs = this.state.pairs.slice();\n\n        let score = pairs[key].scores || {};\n\n        score[scoreType] = scoreAs;\n\n        pairs[key].scores = score;\n\n        this.setState({\n            pairs: pairs\n        });\n    }\n\n    private renderScore() {\n        let scores: ScoreProps = {\n            brain: 0,\n            cogs: 0,\n            leaf: 0,\n            math: 0\n        }\n\n        for (let pair of this.state.pairs) {\n            if (!pair.scores) {\n                continue;\n            }\n\n            switch (pair.scores.basic) {\n                case Suit.BRAIN:\n                    scores.brain++;\n                    break;\n                case Suit.COG:\n                    scores.cogs++;\n                    break;\n                case Suit.MATH:\n                    scores.math++;\n                    break;\n                case Suit.LEAF:\n                    scores.leaf++;\n                    break;\n            }\n            switch (pair.scores.bonus) {\n                case Suit.BRAIN:\n                    scores.brain++;\n                    break;\n                case Suit.COG:\n                    scores.cogs++;\n                    break;\n                case Suit.MATH:\n                    scores.math++;\n                    break;\n                case Suit.LEAF:\n                    scores.leaf++;\n                    break;\n            }\n        }\n\n        return <Score {...scores} />\n    }\n}\n","import * as React from \"react\";\nimport {Card, CardDef} from \"./Card\";\nimport {Suit} from \"./Suit\";\nimport {Scores} from \"./Score\";\nimport {Suit as SuitEnum, ALL_SUITS} from \"../Suit\";\n\nexport interface PairDef {\n    left: CardDef[],\n    right: CardDef[],\n    scores?: Scores\n}\n\nexport interface PairProps {\n    leftPair: CardDef[],\n    rightPair: CardDef[],\n}\n\nexport interface PairSideProps {\n    cards: CardDef[]\n}\n\nexport class PairSide extends React.Component<PairSideProps, {}> {\n    render() {\n        let cardToText = (value: CardDef, key: number) => {\n            return <span key={key}>\n                { value.value }\n                <Suit value={value.suit} />\n            </span>\n        };\n\n        return (\n            <span>\n                { this.props.cards.map(cardToText) }\n            </span>\n        );\n    }\n}\n\nexport class Pair extends React.Component<PairProps, {}> {\n\n    render(): React.ReactNode {\n        return <tr>\n            <td>\n                <PairSide cards={this.props.leftPair}/>\n            </td>\n            <td>\n                <PairSide cards={this.props.rightPair}/>\n            </td>\n        </tr>;\n    }\n\n    public static validateSet(set: CardDef[]): boolean {\n        if (set.length == 0) {\n            return false;\n        }\n\n        for (let cardDef of set) {\n            let card = Card.createFromDef(cardDef);\n            let newSet: Card[] = [];\n\n            for (let nextCardDef of set) {\n                if (nextCardDef != cardDef) {\n                    newSet.push(Card.createFromDef(nextCardDef));\n                }\n            }\n\n            if (!card.validInPair(newSet)) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    public static valueOfPair(set: CardDef[]): number {\n        const mapFn = (card: CardDef) => {\n            return card.value;\n        }\n\n        const reduceFn = (total: number, currentValue: number) => {\n            return total + currentValue;\n        }\n\n        return set.map(mapFn).reduce(reduceFn, 0)\n    }\n}\n\ninterface ScoredPairProps extends PairProps {\n    score: Scores,\n    selectScore: (scoreType: keyof Scores, scoreAs: SuitEnum) => void\n}\n\nexport class ScoredPair extends React.Component<ScoredPairProps, {}> {\n    render (): React.ReactNode {\n        return <tr>\n            <td>\n                <PairSide cards={this.props.leftPair}/>\n            </td>\n            <td>\n                <PairSide cards={this.props.rightPair}/>\n            </td>\n            <td>\n                { this.renderBonuses() }\n            </td>\n            <td>\n                { this.renderButtons() }\n            </td>\n        </tr>\n    }\n\n    private renderBonuses(): React.ReactNode {\n        return <span>\n            { this.isBalancedPair() ? 'Balanced Pair' : 'No bonus' }\n        </span>;\n    }\n\n    private isBalancedPair(): boolean {\n        return this.props.leftPair.length == this.props.rightPair.length;\n    }\n\n    private renderButtons(): React.ReactNode {\n        let basic = this.makeButtons('basic', this.props.score ? this.props.score.basic : null);\n\n        let bonus: React.ReactNode = this.isBalancedPair() ? this.makeButtons('bonus', this.props.score ? this.props.score.bonus : null) : null;\n\n        return <div>\n            { basic }\n            { bonus }\n        </div>\n    }\n\n    private makeButtons(scoreType: keyof Scores, selected: SuitEnum): React.ReactNode {\n        let suits: SuitEnum[] = [\n            this.props.leftPair[0].suit,\n        ];\n\n        if (suits[0] != this.props.rightPair[0].suit) {\n            suits.push(this.props.rightPair[0].suit);\n        }\n        \n        return <div>\n            { \"Score \" + scoreType + \" as:\" }\n            <div className={\"btn-group\"}>\n            { suits.map(\n                (value: SuitEnum, key: number) => {\n                    return <button\n                    className={\"btn btn-secondary \" + (value == selected ? 'active' : '')}\n                        onClick={() => {\n                            this.props.selectScore(scoreType, value)\n                        }}\n                    >\n                        <Suit value={value} />\n                    </button>\n                }\n            ) }\n        </div>\n            </div>;\n    }\n}\n","import * as React from \"react\";\nimport {Suit as SuitEnum} from \"../Suit\";\nimport {Suit} from \"./Suit\";\n\nexport type Scores = {\n    basic?: SuitEnum,\n    bonus?: SuitEnum\n};\n\nexport interface ScoreProps {\n    brain: number,\n    cogs: number,\n    leaf: number,\n    math: number\n};\n\nexport class\nScore extends React.Component<ScoreProps, {}> {\n    render(): React.ReactNode {\n        return <ul>\n            <li>{this.props.brain} <Suit value={SuitEnum.BRAIN} /></li>\n            <li>{this.props.cogs} <Suit value={SuitEnum.COG} /></li>\n            <li>{this.props.leaf} <Suit value={SuitEnum.LEAF} /></li>\n            <li>{this.props.math} <Suit value={SuitEnum.MATH} /></li>\n        </ul>;\n    }\n}\n"],"sourceRoot":""}